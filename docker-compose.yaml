version: '3.9'
services:
  localstack:
    image: localstack/localstack:0.14.0
    environment:
      - EDGE_PORT=8080
      - DATA_DIR=/tmp/localstack
      - DOCKER_HOST=unix:///var/run/docker.sock
      - SKIP_SSL_CERT_DOWNLOAD=1
    ports:
      - "8080"
    labels:
      - "virtual.host=*.eu-west-1.amazonaws.com *.queue.amazonaws.com *.dualstack.eu-west-1.amazonaws.com *.s3.eu-west-1.amazonaws.com *.s3.dualstack.eu-west-1.amazonaws.com *.amazonaws.com *.s3.amazonaws.test *.amazonaws.test amazonaws.test"
      - "virtual.port=8080"
      - "virtual.tls=internal"
    volumes:
      - "${LOCALSTACK_DATA_DIR-/private/tmp/localstack}:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    healthcheck:
      test: ["CMD", "awslocal", "s3", "ls"]
      interval: 5s
    networks:
      internal: {}
      default: {}

  proxy-external:
    image: alpine/socat
    command:
      - tcp-listen:8888,fork,reuseaddr
      - tcp-connect:proxy:8888
    ports:
      - "8888:8888"
    networks:
      - internal
      - default

  proxy-external-ui:
    image: alpine/socat
    command:
      - tcp-listen:8082,fork,reuseaddr
      - tcp-connect:proxy:8082
    ports:
      - "8082:8082"
    networks:
      - internal
      - default

  proxy:
    image: mitmproxy/mitmproxy:7.0.4
    command:
      - "mitmweb"
      - "--ssl-insecure"
      - "--web-host"
      - "0.0.0.0"
      - "--no-web-open-browser"
      - "-p"
      - "8888"
      - "--web-port"
      - "8082"
    dns:
      - 10.10.0.100
    volumes:
      - "mitmproxy:/home/mitmproxy/.mitmproxy/"
    networks:
      internal:
        ipv4_address: 10.10.0.101

  api-gateway:
    image: caddy:2.6.1
    command: caddy run --watch --config /etc/caddy/Caddyfile
    dns:
      - 10.10.0.100
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - caddy-conf:/etc/caddy:ro
      - caddy-data:/data/caddy
    labels:
      - "docker-gen.target"
    networks:
      default: {}
      internal:
        ipv4_address: 10.10.0.102

  dockergen:
    image: nginxproxy/docker-gen:0.9.0
    command: -watch /etc/docker-gen/templates/caddy.tmpl /etc/caddy/Caddyfile
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ${AWS_SANDBOX_DIR-.}/caddy/Caddyfile.tmpl:/etc/docker-gen/templates/caddy.tmpl
      - caddy-conf:/etc/caddy
    labels:
      - "virtual.allow_http"
    networks:
      - internal

  db:
    image: postgres:10.18-alpine
    command:
      - -c
      - max_connections=500
    environment:
      POSTGRES_DB: "dummydbthatisneverused"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "secret"
    ports:
      - "5433:5432"
    volumes:
      - db-data:/var/lib/postgresql/data/
    networks:
      internal: {}
      default: {}

  rds:
    image: luqasn/postgres-magicdb:v0.0.5
    environment:
      TARGET_USER: postgres
      TARGET_PASSWORD: secret
      TARGET_HOST: db:5432
      TARGET_DUMMY_DB: dummydbthatisneverused
    ports:
      - "5432:5432"
    networks:
      internal:
        ipv4_address: 10.10.0.103
      default: {}

  dns:
    container_name: aws-sandbox-dns
    image: coredns/coredns:1.7.0
    volumes:
      - coredns-conf:/config/
    command:
      - -conf
      - /config/Corefile
    ports:
      - "127.0.0.1:5300:53/udp"
    depends_on:
      dockergen-dns:
        condition: service_healthy
    networks:
      internal:
        ipv4_address: 10.10.0.100
      default: {}

  dns-external:
    container_name: aws-sandbox-dns-external
    image: coredns/coredns:1.7.0
    volumes:
      - coredns-conf-external:/config/
    command:
      - -conf
      - /config/Corefile
    ports:
      - "127.0.0.1:53:53/udp"
      - "127.0.0.1:53:53/tcp"
    depends_on:
      dockergen-dns-external:
        condition: service_healthy
    networks:
      default: { }

  dockergen-dns:
    image: nginxproxy/docker-gen:0.9.0
    command: -notify-sighup aws-sandbox-dns -watch /etc/docker-gen/templates/Corefile.tmpl /config/Corefile
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ${AWS_SANDBOX_DIR-.}/dns/Corefile.tmpl:/etc/docker-gen/templates/Corefile.tmpl
      - coredns-conf:/config/
    healthcheck:
      test: ["CMD-SHELL", "[ -f /config/Corefile ]"]
      interval: 5s
    networks:
      - internal

  dockergen-dns-external:
    image: nginxproxy/docker-gen:0.9.0
    command: -notify-sighup aws-sandbox-dns-external -watch /etc/docker-gen/templates/Corefile.tmpl /config/Corefile
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ${AWS_SANDBOX_DIR-.}/dns/Corefile.external.tmpl:/etc/docker-gen/templates/Corefile.tmpl
      - coredns-conf-external:/config/
    healthcheck:
      test: ["CMD-SHELL", "[ -f /config/Corefile ]"]
      interval: 5s
    networks:
      - internal

  cert-helper:
    build: ${AWS_SANDBOX_DIR-.}/cert-helper
    volumes:
      - "mitmproxy:/mitmproxy:ro"
      - "caddy-data:/caddy:ro"
      - "certificates:/tmp/certs"
    healthcheck:
      test: ["CMD-SHELL", "[ -f /tmp/certs/caddy.pem ]"]
      interval: 5s
      start_period: 5s
      retries: 6

networks:
  internal:
    internal: true
    ipam:
      config:
        - subnet: 10.10.0.0/16

volumes:
  mitmproxy:
  certificates:
  caddy-conf:
  caddy-data:
  db-data:
  coredns-conf:
  coredns-conf-external:
