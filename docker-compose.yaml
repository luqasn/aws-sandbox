version: '3'
services:
  localstack:
    image: localstack/localstack:0.12.9
    ports:
      - "${PORT_WEB_UI-8081}:8081"
    environment:
      - EDGE_PORT=80
      - SERVICES=${SERVICES- }
      - DEBUG=${DEBUG- }
      - DATA_DIR=${DATA_DIR- }
      - PORT_WEB_UI=${PORT_WEB_UI-8081}
      - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR- }
      - KINESIS_ERROR_PROBABILITY=${KINESIS_ERROR_PROBABILITY- }
      - DOCKER_HOST=unix:///var/run/docker.sock
      - HOST_TMP_FOLDER=${TMPDIR}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.localstack.rule=HostRegexp(`{subdomain:.+}.amazonaws.com`)"
      - "traefik.http.routers.localstack_tls.rule=HostRegexp(`{subdomain:.+}.amazonaws.com`)"
      - "traefik.http.routers.localstack_tls.tls=true"
      - "traefik.docker.network=internal"
      - "traefik.http.services.localstack.loadbalancer.server.port=80"
      
    volumes:
      - "/private/tmp/localstack:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      default: {}
      internal: {}

  proxy:
    image: mitmproxy/mitmproxy:5.2
    command:
      - "mitmweb"
      - "--ssl-insecure"
      - "--web-host"
      - "0.0.0.0"
      - "--no-web-open-browser"
      - "-p"
      - "8888"
      - "--web-port"
      - "8082"
#      - "--no-http2" # required for overriding host header in s3-url-hack.py
#      - "-s"
#      - "/s3-url-hack.py" # workaround for https://github.com/localstack/localstack/issues/2631
    dns:
      - 10.5.0.100
    ports:
      - "8888:8888"
      - "8082:8082"
    volumes:
      - "mitmproxy:/home/mitmproxy/.mitmproxy/"
#      - "./s3-url-hack.py:/s3-url-hack.py"
    networks:
      default: {}
      internal:
        ipv4_address: 10.5.0.101

  api-gateway:
    image: "traefik:v2.2"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.webtls.address=:443"
    dns:
      - 10.5.0.100
    labels:
      - traefik.docker.network=internal
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      default: {}
      internal:
        aliases:
          - sqs.eu-west-1.amazonaws.com

  dns:
    image: coredns/coredns:1.7.0
    volumes:
      - ./Corefile:/Corefile
    networks:
      default: {}
      internal:
        ipv4_address: 10.5.0.100

  cert-helper:
    build: cert-helper
    volumes:
      - "mitmproxy:/mitmproxy:ro"
      - "./certificates:/etc/ssl/certs"

networks:
  internal:
    internal: true
    ipam:
      config:
        - subnet: 10.5.0.0/16

volumes:
  mitmproxy:
#  certificates: